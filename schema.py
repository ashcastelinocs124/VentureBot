from typing import List, Tuple
from pydantic import BaseModel,Field
from typing import List, Optional, Dict




class ManagerAgentSchema(BaseModel):

    """Output Schmea for manager agent"""

    reasoning: str = Field(

        description = "Step by Step reasoning behind the decision"

    )
    result : str = Field(
        description= "Decision on which agent should answer the user question among" \
        "onboarding_agent" \
        "validator_agent"\
        "product_manager" \
        "prompt_engineer"
    )

    confidence_score : str = Field(

        description = "The confidence on the decision the score should be between 0-1"

    )
    action : str = Field(
        description= "This field requires a response of yes or no based on whether the user wants to move to the next stage"
    )

    answer : str = Field(
        description= "This field consists of the answer to the user query"
    )

 

class IdeaItem(BaseModel):
    """Individual idea item"""
    id: int = Field(description="Unique identifier for the idea")
    title: str = Field(description="Brief title of the venture idea")
    description: str = Field(description="Detailed description of the idea")
    badm_concept: str = Field(description="BADM 350 technical concept applied")
    
    class Config:
        extra = "forbid"  # Ensures additionalProperties: false

class Idea_Generation_Schema(BaseModel):
    """The output schema for idea generation agent"""
    
    Ideas: List[IdeaItem] = Field(
        description="List of ideas generated by the agent based on user's preferences"
    )
    
    Link: str = Field(
        description="Links to each of the ideas"
    )
    
    confidence_score: float = Field(
        description="The confidence on the decision, score between 0.0-1.0",
        ge=0.0,
        le=1.0
    )
    
    class Config:
        extra = "forbid"



class ValidationResult(BaseModel):
    """Validation results for a venture idea"""
    market_analysis: str = Field(
        description="Analysis of market potential and opportunities"
    )
    customer_segments: str = Field(
        description="Identification of target customer segments"
    )
    technical_feasibility: str = Field(
        description="Assessment of technical implementation feasibility"
    )
    competitive_analysis: str = Field(
        description="Analysis of competitive landscape"
    )
    cost_estimate: str = Field(
        description="Estimated costs and resource requirements"
    )

"""
  "prd": "<overview + value proposition>",
       "user_stories": ["...", "..."],
       "functional_requirements": ["...", "..."],
       "nonfunctional_requirements": ["...", "..."],
       "success_metrics": ["...", "..."]
"""



class Validator_Agent_Schema(BaseModel):
    """Schema for validation agent output"""
    validation: ValidationResult = Field(
        description="Structured validation analysis of the venture idea"
    )

    
#Output Schema for Planning Agent

class ProductResult(BaseModel):
    """Product Manager Agent Results"""
    user_stories : str = Field(
        description = "This field should describe what users want and why"
    )
    functional_requirements: str = Field(
        description = "This field focuses on specific features or capabilities the product must have"
    )
    nonfunctional_requirements : str = Field(
        description  = "This field covers how the product behaves which includes performance, scalibility and reliability"
    )
    success_metrics : str = Field(
        description = "The field covers measurable indicators of success and helps track whether product is achieving its goals"
    )

class ProductManager_Output_Schmea(BaseModel):
    """Output Schema for the Product Manager Agent"""

    product_manager : ProductResult = Field(
        description = "This field covers the results from the agent"
    )





#Output Schema for the classification agent

class ClassificationAgent_OutputSchema(BaseModel):

    """"The output schema for the classification agent to classify the result"""

    steps: str = Field(

        description = "Step-by-Step reasoning behind the decision"

    )

    result : str = Field (

        description = "The final output should be either oil_agent, water_agent,  WTC_Agent, BHP_Pressure_Agent"

    )

    reasoning : str = Field(

        description = "The reasoning behind the result"

    )

    confidence_score : str = Field(

        description = "The confidence score of the result should be between 0-1"

    )

 

#Output Schema for the evaluation agent

class EvaluationAgent_OutputSchema(BaseModel):

    """The output schema for the evaluation agent"""

    comment : str = Field(

        description= "The explanation on why the agent is doing a good/bad job"

    )

    score : str = Field(

        description = "The score of how the agent performed"

    )




class UserStory(BaseModel):
    role: str = Field(description="The type of user")
    goal: str = Field(description="What the user wants to accomplish")
    reason: str = Field(description="Why the user wants this")

class ProductManagerSchema(BaseModel):
    overview: str = Field(description="One sentence overview and value proposition")
    user_stories: List[UserStory] = Field(description="List of user stories in standard format")
    functional_requirements: List[str] = Field(description="Key functional requirements")
    success_metrics: List[str] = Field(description="Measurable KPIs")

class MarketInsight(BaseModel):
    """Market research insights from Sonar/Perplexity"""
    source_name: str = Field(description="Name of the source")
    source_url: str = Field(description="URL of the source")
    insight: str = Field(description="The specific insight or data point")

class SonarOutput(BaseModel):
    """Schema for structured output from Perplexity Sonar search"""
    market_size: List[MarketInsight] = Field(
        description="Market size data including TAM and growth rates",
        default_factory=list
    )
    
    competitors: List[MarketInsight] = Field(
        description="Information about key competitors in the space",
        default_factory=list
    )
    
    opportunities: List[MarketInsight] = Field(
        description="Underserved market segments and opportunities",
        default_factory=list
    )
    
    trends: List[MarketInsight] = Field(
        description="Current market trends and future outlook",
        default_factory=list
    )
    
    barriers: List[MarketInsight] = Field(
        description="Entry barriers and regulatory considerations",
        default_factory=list
    )
    
    recommendations: List[str] = Field(
        description="Strategic recommendations for market entry",
        default_factory=list
    )
    
    summary: str = Field(
        description="Overall summary of validation findings"
    )

class PromptEngineer(BaseModel):
    """Output Schema for prompt engineer"""

    code : str = Field(
        description= "This field represents the code for low-code tools"
    )



class SonarInput(BaseModel):
    """Input schema for Sonar research tool"""
    title: str = Field(description="Title of the venture idea to research")
    description: str = Field(description="Description of the venture idea to research")
